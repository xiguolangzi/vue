1.安装 node 和 npm 包管理工具
  安装node会自带安装npm
  官网：https://nodejs.org/en 下载推荐版本（LTS版本）的安装程序。LTS代表长期支持版本，适合大多数用户
  傻瓜式安装
  检查安装结果：node -v , npm -v 可以查看版本号

2.安装 vue@cli
  命令：npm i @vue/cli -g
  查看安装版本号：vue --version

3.创建项目架子
  选择项目路径路径-> 创建项目 ：vue create project-name（项目名不能是中文）-> 选择vue版本 -> 选择yarn安装 -> 生成项目骨架

4.启动项目
  切换到项目路径 cd demo1 -> 启动项目npm run serve （找package.json）/ yarn serve
  启动命令中的'serve'不确定，根据package.json下的 scripts 下的 对应"vue-cli-service serve"的key 命名

5.项目结构
  node_modules        第三方包
  public              放html文件的地方
    -favicon.ico      网站图标
    -index.html       模板文件
  scr                 源代码目录
    -assets           静态资源目录
    -components       组件目录
    -App.vue          App根组件 - 项目运行看到的内容就在这里编写
    -main.js          入口文件
  .gitignore          git忽视文件
  babel.config.js     babel配置文件
  jsconfig.json       js配置文件
  package-lock.json   
  pachage.json        项目配置文件
  vue.config.js       vue-cli 配置文件

6. App.vue
  需要安装 Vetur 插件
  分为3部分：
    template  结构
    scripts   行为
    style     样式 ( 让组件支持less，需要装包)
      (1) 让style支持less
      a. 给style加上 lang='less'
      b. 安装依赖包 less less-loader
      c. 安装插件语法 yarn add less less-loader -D

6.组件生成快捷键 ‘<vue 按 tab 键’
     1.如果tab快捷键不生效，在vscode设置里搜索'trigger expansion on tab' -> 勾选即可

7.组件里的 style 是全局作用域
  scoped 是控制style为局部作用域
  <style scoped> 
      样式....
  </style>

8.组件里的 data是函数
   // data是一个函数，保证每个组件实例，维护独立的数据
  data(){
    return{
      count:5
    }
  },

9.不同组件之间的关系
  A. 父子关系：
    1. props 父传子
	    （1）父级通过data创建参数：
        data(){
          return{
            myTitle:'黑马程序员'
          }
        }
	    （2）父级在引用子级组件时通过设置属性传递参数：:title=''myTitle''
	    （3）子级通过props获取父级传递的参数，props:['title',]
	    （4）子级引用参数 {{title}}
    2. $emit 子传父
	    （1）父级在引用子级元素 添加传递参数后，设置监听函数 @changeTitle="handleChange"
		      changeTitle：子级的调用函数
		      handleChange：父级根据自己传参实行的处理函数
	    （2）父级添加处理函数 ：
		      methods:{
            handleChange(newdatas){
              this.oldDatas =  newdatas
            }
          },
      （3）子级通过点击事件触发 父级的修改函数
        methods:{
          changeFn(){
            // 通过$emit('父级监听函数名','修改的值') 向父级发送消息通知
            this.$emit('changeTitle','修改后的值')
          }
        }
      
      3. props的完整写法
      props:{
        title:{
          // a.类型判断
          type:String,
          // b.必传校验、非空校验
          require:true,
          // c.默认值设置
          default:"黑马程序员",
          // d.自定义逻辑校验
          validator(value){
            console.log(value)
            //传入值value的校验逻辑
            return true
          }
        }
      },
  B. 非父子关系 组件通信(消息推送原理):
    （1）新建js文件 -> 创建消息调度中心(Vue实例)
      import Vue from 'vue'
      const Bus = new Vue()
      export default Bus

    （2）组件A 消息订阅
      import Bus from ../utils/EvenBus.js
      export default {
        created(){
          Bus.$on('sendMsg',(msg)=>{
            console.log(msg)
            //接收到的订阅消息msg的处理逻辑
          })
        },
      }
    （3）组件B 发送消息
    import Bus from ../utils/EvenBus.js
    export default{
      methods:{
        clickSend(){
          Bus.$emit('sendMsg','要发送的消息')
        }
      }
    }

  C.子孙组件 跨层级共享数据
    （1）父类组件 设置共享数据
      export default {
        provide(){
          return{
            // 简单数据类型 - 非响应式
            color:'red',
            // 复杂数据类型 - 响应式
            userInfo:{
              name:'EZ',
              age:18
            }
          }
        }
      }

    （2）子孙组件 设置共享数据
      <div>
        //简单数据类型 - 不会因根组件传过来的数据改变而改变
        {{color}}
        //复杂数据类型 - 会因根组件传过来的数据改变而改变
        {{userInfo.name}}
        {{userInfo.age}}
      </div>
      export default {
        inject:['color','userInfo']
      }

10. v-model 父子组件双向绑定拆分
  A. 不同表单v-model拆分不一样：
    （1）下拉菜单： v-model = :value='' + @change=''
    （2）输入框： v-model = :value='' + @input=''

  B. 父子组件 使用举例：
    父组件：
      <BaseSelect 
        //传递参数
        :cityId="selectedId" 
        //监听函数
        @changeId="selectId"
      ></BaseSelect>

      export default{
        data(){
          return{
            selectedId = '102'
          }
        },
        methods:{
          selectId(value){
            this.selectedId = value
          },
        },
      }

    子组件：
      export default {
        //接收父组件参数
        props:{
          cityId:{
            type:String,
            default:'103'
          }
        },
        methods:{
          //修改下拉菜单调用函数@change='fn'
          fn(e){
            //修改后的参数返传给父组件的监听函数进行修改
            this.$emit('changeId',e.target.value)
          }
        }
      }

  C. 父组件使用 v-model
    父组件使用 v-model 的方式 :
      v-model="selectedId"
      相当于：
      :value='selectedId' @input='this.selectedId = value'
      子组件相对接收 value ，监听函数 input